
objects
-------
*** Everything in Python is Object ***
*** Every object contains set of methods ****


number
-------
number can be integer or decimal or octal or hexa.

aval = 10
bval = 34.43


string
-------
string is sequence of characters.
String can be defined in single or double or triple quotes.

aname = 'python programming'
bname = "scala programming"
cname = """machine learning"""


list ( array in C )
--------------------
list contains set of elements.
Elements can be set of numbers or strings or any combination.
list elements are defined in [].

alist = [10,20,30,40]
blist = ["python","perl"]
clist = [45.43,60,"java"]


tuple  ( READ ONLY IMMUTABLE  UNCHANGABLE )
--------
tuple contains set of elements.
Elements can be set of numbers or strings or any combination.
tuple elements are defined in ().
**** Elements inside tuple cannot be modified directly *****


atup = (10,34,43)
btup = ("java","oracle")
ctup = (45.43,10,2,"c")


dictionary
------------
dictionary contains elements in key value pairs.
dictionary elements are defined in {}.
In dictionary , key will either number or string used to uniquely identity.
                value can be number or string or list or tuple or dictionary or any other complex structure


syntax:   object = {key:value , key:value , key:value }
example:   book  = {"chap1":10 , "chap2":20 ,"chap3":30, "chap1":1000 } 
          bookinfo={"chap1":[10,"rita","UK"] , "chap2":[20,"Gita","UP"] ,"chap3":{"pages":30} ,3:43  }




set
-----
set contains URORDERED and UNIQUE of SAME type.
set elements are defined in {}.


aset = {10,20,30,10,20}


operators
------------


arithmetic operators :  + - * % /

relational operators :
------------------------
< <= > >= == !=

logical operators
------------------
and   or  not

if name.isupper()  and len(name)> 0 :
   # logical statements


assignment operators   ( increment and decrement operators  ++ and -- are not allowed)
------------------------
= 

val = 10
val +=1    or  val= val + 1   


special operators
--------------------
in
as
*
+   joining operator


statements
--------------
if
if-else
if-elif-elif-elif..... else

loop
-----
for 
while

jump statements
----------------
break
continue


functions
-----------
- builtin functions


- user defined functions


built-in functions
--------------------

print()
input()
range()
len()
help()
dir()
type()
isinstance()
id()
max()
min()
sum()
zip()
typecasting functions
-----------------
list()
tuple()
dict()
set()
str()
int()
float()
oct()
hex()



methods & functions
------------------------


- methods are object specific
- methods are accessed with . symbol
- string methods are different to list methods


- functions are common for all the objects




file handling
--------------

working with flat files  (  txt csv conf log dat rtf ... )
working with third party files ( pdf docx pptx mp4  xlsx ...... )


working with flat files
--------------------------



opening the file
------------------
syntax:  object = open(filename,mode)
example:   fobj = open("customers.txt","r")


close the file
-------------
syntax : object.close()
example: fobj.close()


writing to the file
-----------------
fobj = open("customers.txt","w")
# lines
fobj.close()



example:   fobj = open("customers.txt","r")
           If the file doesn't exist... will throw an error
                  file is existing .... file content will be displayed


example:   fobj = open("customers.txt","w")
           if the file doesn't exist .... file will be created first
                   file is already existing..file content will be erased

example:   fobj = open("customers.txt","a")
           if the file doesn't exist .... file will be created first
                  file is existing .....   data will be appended at the end



file read operation
------------------
- reading line by line
- fobj.readlines()
- fobj.read()          : 
- using csv library     - builtin library
- using pandas library  - third-party library



functions
- builtin functions
- user defined functions

user defined functions
------------------------

passing arguments

- fixed arguments
- default arguments
- keyword arguments
- variable length arguments






libraries
---------

built-in libraries
------------------
Builtin libraries are generally used by everyone which are available by default with python.
( OS  operations , copy , move , delete , ftp operations , mail sending , maths , statistics , telnet , ssh  )


third party libraries
-------------------
Depending on the requirement( cloud operations with aws,azure,gc , data science , web developement , image processing, database programming ..... ) , developer has to install the third party library from www.pypi.org
or pip tool or easy_install tool

importing library
----------------------

import math
print(math






installing library
-----------------

- using pip tool or easy_install tool
- installing manually by downloading the file from www.pypi.org

all the third party packages will be insalld in 

C:\Users\gsripath\anaconda3\Lib\site-packages

or

C:\ProgramData\anaconda3







display all existing databases
-----------------------------
show databases;

create your database
----------------------
create database realestateinfo ;

access your database
---------------------
use realestateinfo;

display all tables
-----------------
show tables ;     ( will be empty initial )

creating table
--------------------
create table realestate ( street varchar(100) , city varchar(100) );

inserting records
------------------
insert into realestate values('MG Road','Hyderabad');
insert into realestate values('GT Road','Delhi');

display all the records
------------------------
select * from realestate;































































































































































